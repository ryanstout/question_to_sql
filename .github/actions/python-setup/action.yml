name: Node Setup
description: Setup node environment
inputs:
  setup-db:
    description: Should the prisma migrations be run
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: ðŸ›‘ Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
    - uses: actions/setup-python@v4
      with:
        # TODO should extract from tool-versions
        python-version: 3.10.9
    # https://stackoverflow.com/questions/62977821/how-to-cache-poetry-install-for-github-actions
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        # TODO should extract from tool-versions
        version: 1.3.2
        # TODO can we version this as well?
        # virtualenvs-create: false
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        # TODO should break on python version
        key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

    - name: âŽ” Setup node
      uses: actions/setup-node@v3
      with:
        node-version-file: ".tool-versions"

    - name: Setup NPM Version
      shell: bash
      run: |
        source docker/shared.sh
        extract_npm_version
        npm install -g npm@$NPM_VERSION

    # NOTE on the python side we only need NPM for the prisma setup, but selectively extracting which packages
    #      we need is a massive amount of work, so we just install everything.
    # docs recommend *not* using the lockfile, but I'd prefer to keep deps consistent
    - name: ðŸ“¥ Download deps
      uses: bahmutov/npm-install@v1

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      shell: bash
      run: |
        poetry install
        poetry run npx prisma generate
